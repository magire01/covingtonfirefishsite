(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[63068],{378509:function(n,a,s){"use strict";s.r(a),s.d(a,{default:function(){return i}}),s(827378);var t,e=s(669595),o={en:{description:"An overview of adopting CSS theme variables in Material UI.",location:"/docs/data/material/experimental-api/css-theme-variables/overview.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n<symbol id="comment-link-icon" viewBox="0 0 24 24">\n  <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 14v-2.47l6.88-6.88c.2-.2.51-.2.71 0l1.77 1.77c.2.2.2.51 0 .71L8.47 14H6zm12 0h-7.5l2-2H18v2z" />\n</symbol>\n</svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>CSS theme variables</h1><p class="description">An overview of adopting CSS theme variables in Material UI.</p>\n\n<p><a href="https://www.w3.org/TR/css-variables-1/" target="_blank" rel="noopener nofollow">CSS variables</a> are a modern cross-browser feature that let you declare variables in CSS and reuse them in other properties.\nYou can implement them to improve Material UI&#39;s theming and customization experience.</p>\n<aside class="MuiCallout-root MuiCallout-info"><p>If this is your first time encountering CSS variables, you should check out <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties">the MDN Web Docs on CSS custom properties</a> before continuing here.</p>\n\n</aside><h2 id="introduction">Introduction<a aria-labelledby="introduction" class="anchor-link" href="#introduction" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="introduction"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>CSS theme variable support is a new feature in Material UI added in <a href="https://github.com/mui/material-ui/releases/tag/v5.6.0"><code>v5.6.0</code></a> (but not enabled by default). It tells Material UI components to use the generated CSS theme variables instead of raw values.</p>\n<h2 id="advantages">Advantages<a aria-labelledby="advantages" class="anchor-link" href="#advantages" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="advantages"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><ul>\n<li>It lets you prevent <a href="https://github.com/mui/material-ui/issues/27651">dark-mode SSR flickering</a>.</li>\n<li>You can create unlimited color schemes beyond <code>light</code> and <code>dark</code>.</li>\n<li>It offers a better debugging experience not only for developers but also designers on your team.</li>\n<li>The color scheme of your website is automatically synced between browser tabs.</li>\n<li>It simplifies integration with third-party tools because CSS theme variables are available globally.</li>\n<li>It reduces the need for a nested theme when you want to apply dark styles to a specific part of your application.</li>\n</ul>\n<h2 id="trade-offs">Trade-offs<a aria-labelledby="trade-offs" class="anchor-link" href="#trade-offs" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="trade-offs"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>For server-side applications, there are some trade-offs to consider:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Compare to the default method</th>\n<th>Reason</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HTML size</td>\n<td>Bigger</td>\n<td>CSS variables are generated for both light and dark mode at build time.</td>\n</tr>\n<tr>\n<td><a href="https://web.dev/fcp/">First Contentful Paint (FCP)</a></td>\n<td>Larger</td>\n<td>Since the HTML size is generally bigger, the time to download the HTML before showing the content is longer.</td>\n</tr>\n<tr>\n<td><a href="https://web.dev/tti/">Time to Interactive (TTI)</a></td>\n<td>Smaller (for dark mode)</td>\n<td>Stylesheets are not regenerated between light and dark mode, so it takes less time for JavaScript to run.</td>\n</tr>\n</tbody></table>\n<aside class="MuiCallout-root MuiCallout-warning"><p>The comparison described in the table above may not be applicable to large and complex applications since there are so many factors that can impact performance metrics.</p>\n\n</aside><h2 id="mental-model">Mental model<a aria-labelledby="mental-model" class="anchor-link" href="#mental-model" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="mental-model"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Adopting CSS variables requires some shifts in your mental model of theming and customizing user-selected modes.</p>\n<h3 id="colors">Colors<a aria-labelledby="colors" class="anchor-link" href="#colors" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="colors"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p><strong><a href="/material-ui/customization/dark-mode/">Default approach</a></strong>: Light and dark colors are created separately.</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">const</span> lightTheme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> darkTheme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">palette</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'dark\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p><strong>CSS theme variables</strong>: Light and dark colors are consolidated into a theme.</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token comment">// `extendTheme` is a new API</span>\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">extendTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">colorSchemes</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">light</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// palette for light mode</span>\n      <span class="token literal-property property">palette</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">dark</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// palette for dark mode</span>\n      <span class="token literal-property property">palette</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="styling">Styling<a aria-labelledby="styling" class="anchor-link" href="#styling" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="styling"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p><strong>Default approach</strong>: Usually relies on JavaScript to switch the value between modes:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">MuiButton</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">styleOverrides</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function-variable function">root</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token comment">// use javascript conditional expression</span>\n          <span class="token literal-property property">color</span><span class="token operator">:</span> theme<span class="token punctuation">.</span>palette<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">\'dark\'</span> <span class="token operator">?</span> <span class="token string">\'#fff\'</span> <span class="token operator">:</span> theme<span class="token punctuation">.</span>palette<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>main<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p><strong>CSS theme variables</strong>: Styling leans toward cascading and specificity by using the appropriate selector which lets you prevent <a href="https://github.com/mui/material-ui/issues/27651">dark-mode SSR flickering</a>:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token function">extendTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">MuiButton</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">styleOverrides</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function-variable function">root</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token literal-property property">color</span><span class="token operator">:</span> theme<span class="token punctuation">.</span>vars<span class="token punctuation">.</span>palette<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>main<span class="token punctuation">,</span>\n          <span class="token comment">// When the mode switches to dark, the attribute selector is attached to</span>\n          <span class="token comment">// the &lt;html> tag by default.</span>\n          <span class="token string-property property">\'[data-mui-color-scheme="dark"] &amp;\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">\'#fff\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="whats-next">What&#39;s next<a aria-labelledby="whats-next" class="anchor-link" href="#whats-next" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="whats-next"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><ul>\n<li>To start a new project with CSS theme variables, check out the <a href="/material-ui/experimental-api/css-theme-variables/usage/">basic usage guide</a>.</li>\n<li>For an existing Material UI project, check out the <a href="/material-ui/experimental-api/css-theme-variables/migration/">migration guide</a>.</li>\n<li>For theming and customization, check out the <a href="/material-ui/experimental-api/css-theme-variables/customization/">how-to guide</a>.</li>\n</ul>\n'],toc:[{text:"Introduction",level:2,hash:"introduction",children:[]},{text:"Advantages",level:2,hash:"advantages",children:[]},{text:"Trade-offs",level:2,hash:"trade-offs",children:[]},{text:"Mental model",level:2,hash:"mental-model",children:[{text:"Colors",level:3,hash:"colors"},{text:"Styling",level:3,hash:"styling"}]},{text:"What&#39;s next",level:2,hash:"whats-next",children:[]}],title:"CSS theme variables",headers:{components:[]}}},p={};p.scope={process:{},import:{}};var c={},l=s(824246);function i(){return t||(t=(0,l.jsx)(e.Z,{demos:p,docs:o,demoComponents:c}))}},384310:function(n,a,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/experimental-api/css-theme-variables/overview",function(){return s(378509)}])}},function(n){n.O(0,[75760,36634,39152,35408,85992,56063,76957,41253,46888,21829,81125,68256,96387,46324,70116,73793,16402,86277,49983,18956,58156,76822,78723,69595,49774,92888,40179],function(){return n(n.s=384310)}),_N_E=n.O()}]);