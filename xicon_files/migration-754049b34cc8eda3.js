(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[48448],{985378:function(n,s,a){"use strict";a.r(s),a.d(s,{default:function(){return i}}),a(827378);var t,e=a(669595),p={en:{description:"A step-by-step migration guide to start using CSS theme variables in your project.",location:"/docs/data/material/experimental-api/css-theme-variables/migration.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n<symbol id="comment-link-icon" viewBox="0 0 24 24">\n  <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 14v-2.47l6.88-6.88c.2-.2.51-.2.71 0l1.77 1.77c.2.2.2.51 0 .71L8.47 14H6zm12 0h-7.5l2-2H18v2z" />\n</symbol>\n</svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Migrating to CSS theme variables</h1><p class="description">A step-by-step migration guide to start using CSS theme variables in your project.</p>\n\n<p>This is a guide that shows how to migrate an existing Material UI project to CSS theme variables.\nThis migration offers a solution to a longstanding issue in which a user who prefers dark mode will see a flash of light mode when the page first loads.</p>\n<h2 id="1-add-the-new-provider">1. Add the new provider<a aria-labelledby="1-add-the-new-provider" class="anchor-link" href="#1-add-the-new-provider" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="1-add-the-new-provider"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><h3 id="without-a-custom-theme">Without a custom theme<a aria-labelledby="without-a-custom-theme" class="anchor-link" href="#without-a-custom-theme" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="without-a-custom-theme"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you aren&#39;t using <a href="/material-ui/customization/theming/#theme-provider"><code>ThemeProvider</code></a>, then all you need to do is wrap your application with the <code>CssVarsProvider</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Experimental_CssVarsProvider <span class="token keyword">as</span> CssVarsProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssVarsProvider</span></span><span class="token punctuation">></span></span><span class="token operator">...</span>your existing application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CssVarsProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>You should see the generated CSS theme variables in the stylesheet. Material UI components that render inside the new provider will automatically consume the variables.</p>\n<h3 id="custom-theme">Custom theme<a aria-labelledby="custom-theme" class="anchor-link" href="#custom-theme" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="custom-theme"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you have a custom theme, you must replace <code>createTheme()</code> with the <code>extendTheme()</code> API.</p>\n<p>This moves palette customization to within the <code>colorSchemes</code> node.\nOther properties can be copied and pasted.</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import { createTheme } from \'@mui/material/styles\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import { experimental_extendTheme as extendTheme} from \'@mui/material/styles\';\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">const lightTheme = createTheme({\n</span><span class="token prefix deleted">-</span><span class="token line">  palette: {\n</span><span class="token prefix deleted">-</span><span class="token line">   primary: {\n</span><span class="token prefix deleted">-</span><span class="token line">     main: \'#ff5252\',\n</span><span class="token prefix deleted">-</span><span class="token line">   },\n</span><span class="token prefix deleted">-</span><span class="token line">   ...\n</span><span class="token prefix deleted">-</span><span class="token line"> },\n</span><span class="token prefix deleted">-</span><span class="token line"> // ...other properties, e.g. breakpoints, spacing, shape, typography, components\n</span><span class="token prefix deleted">-</span><span class="token line">});\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">const darkTheme = createTheme({\n</span><span class="token prefix deleted">-</span><span class="token line">  palette: {\n</span><span class="token prefix deleted">-</span><span class="token line">   mode: \'dark\',\n</span><span class="token prefix deleted">-</span><span class="token line">   primary: {\n</span><span class="token prefix deleted">-</span><span class="token line">     main: \'#000\',\n</span><span class="token prefix deleted">-</span><span class="token line">   },\n</span><span class="token prefix deleted">-</span><span class="token line">   ...\n</span><span class="token prefix deleted">-</span><span class="token line"> },\n</span><span class="token prefix deleted">-</span><span class="token line">});\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">const theme = extendTheme({\n</span><span class="token prefix inserted">+</span><span class="token line">  colorSchemes: {\n</span><span class="token prefix inserted">+</span><span class="token line">    light: {\n</span><span class="token prefix inserted">+</span><span class="token line">      palette: {\n</span><span class="token prefix inserted">+</span><span class="token line">        primary: {\n</span><span class="token prefix inserted">+</span><span class="token line">          main: \'#ff5252\',\n</span><span class="token prefix inserted">+</span><span class="token line">        },\n</span><span class="token prefix inserted">+</span><span class="token line">        ...\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">    },\n</span><span class="token prefix inserted">+</span><span class="token line">    dark: {\n</span><span class="token prefix inserted">+</span><span class="token line">      palette: {\n</span><span class="token prefix inserted">+</span><span class="token line">        primary: {\n</span><span class="token prefix inserted">+</span><span class="token line">          main: \'#000\',\n</span><span class="token prefix inserted">+</span><span class="token line">        },\n</span><span class="token prefix inserted">+</span><span class="token line">        ...\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">    },\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span><span class="token prefix inserted">+</span><span class="token line">  // ...other properties\n</span><span class="token prefix inserted">+</span><span class="token line">});</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Then, replace the <code>ThemeProvider</code> with the <code>CssVarsProvider</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import { ThemeProvider } from \'@mui/material/styles\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import { Experimental_CssVarsProvider as CssVarsProvider } from \'@mui/material/styles\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const theme = extendTheme(...);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function App() {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  return &lt;ThemeProvider theme={theme}>...&lt;/ThemeProvider>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  return &lt;CssVarsProvider theme={theme}>...&lt;/CssVarsProvider>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">}</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Save the file and start the development server.\nYour application should be able to run without crashing.</p>\n<aside class="MuiCallout-root MuiCallout-info"><p>If you encounter any errors, please <a href="https://github.com/mui/material-ui/issues/new?assignees=&labels=status%3A+needs+triage&template=1.bug.yml">open an issue</a> to share it with us. We&#39;d love to help.</p>\n\n</aside><p>If you inspect the page, you will see the generated CSS variables in the stylesheet. Material UI components that render inside the new provider will automatically use the CSS theme variables.</p>\n<h2 id="2-remove-the-toggle-mode-logic">2. Remove the toggle mode logic<a aria-labelledby="2-remove-the-toggle-mode-logic" class="anchor-link" href="#2-remove-the-toggle-mode-logic" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="2-remove-the-toggle-mode-logic"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>You can remove your existing logic that handles the user-selected mode and replace it with the <code>useColorScheme</code> hook.</p>\n<p><strong>Before</strong>:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token comment">// This is only a minimal example to demonstrate the migration.</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>mode<span class="token punctuation">,</span> setMode<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'mode\'</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">\'light\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token string">\'light\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// a new theme is created every time the mode changes</span>\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">palette</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      mode<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...your custom theme</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span>\n        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> newMode <span class="token operator">=</span> mode <span class="token operator">===</span> <span class="token string">\'light\'</span> <span class="token operator">?</span> <span class="token string">\'dark\'</span> <span class="token operator">:</span> <span class="token string">\'light\'</span><span class="token punctuation">;</span>\n          <span class="token function">setMode</span><span class="token punctuation">(</span>newMode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">\'mode\'</span><span class="token punctuation">,</span> newMode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span>mode <span class="token operator">===</span> <span class="token string">\'light\'</span> <span class="token operator">?</span> <span class="token string">\'Turn dark\'</span> <span class="token operator">:</span> <span class="token string">\'Turn light\'</span><span class="token punctuation">}</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span>\n      <span class="token operator">...</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p><strong>After</strong>:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>\n  Experimental_CssVarsProvider <span class="token keyword">as</span> CssVarsProvider<span class="token punctuation">,</span>\n  experimental_extendTheme <span class="token keyword">as</span> extendTheme<span class="token punctuation">,</span>\n  useColorScheme<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">ModeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> mode<span class="token punctuation">,</span> setMode <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useColorScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span>\n      <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">setMode</span><span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">\'light\'</span> <span class="token operator">?</span> <span class="token string">\'dark\'</span> <span class="token operator">:</span> <span class="token string">\'light\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n    <span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span>mode <span class="token operator">===</span> <span class="token string">\'light\'</span> <span class="token operator">?</span> <span class="token string">\'Turn dark\'</span> <span class="token operator">:</span> <span class="token string">\'Turn light\'</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">extendTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ...your custom theme</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssVarsProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ModeToggle</span></span> <span class="token punctuation">/></span></span>\n      <span class="token operator">...</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CssVarsProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>The <code>useColorScheme</code> hook provides the user-selected <code>mode</code> and a function <code>setMode</code> to update the value.</p>\n<p>The <code>mode</code> is stored inside <code>CssVarsProvider</code> which handles local storage synchronization for you.</p>\n<h2 id="3-prevent-dark-mode-flickering-in-server-side-applications">3. Prevent dark-mode flickering in server-side applications<a aria-labelledby="3-prevent-dark-mode-flickering-in-server-side-applications" class="anchor-link" href="#3-prevent-dark-mode-flickering-in-server-side-applications" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="3-prevent-dark-mode-flickering-in-server-side-applications"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>The <code>getInitColorSchemeScript()</code> API prevents dark-mode flickering by returning a script that must be run before React.</p>\n<h3 id="next-js">Next.js<a aria-labelledby="next-js" class="anchor-link" href="#next-js" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="next-js"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Place the script before <code>&lt;Main /&gt;</code> in your <a href="https://nextjs.org/docs/advanced-features/custom-document"><code>pages/_document.js</code></a>:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> Document<span class="token punctuation">,</span> <span class="token punctuation">{</span> Html<span class="token punctuation">,</span> Head<span class="token punctuation">,</span> Main<span class="token punctuation">,</span> NextScript <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'next/document\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> getInitColorSchemeScript <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyDocument</span> <span class="token keyword">extends</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Html</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n          <span class="token punctuation">{</span><span class="token function">getInitColorSchemeScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Main</span></span> <span class="token punctuation">/></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NextScript</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Html</span></span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="gatsby">Gatsby<a aria-labelledby="gatsby" class="anchor-link" href="#gatsby" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="gatsby"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Place the script in your <a href="https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr/"><code>gatsby-ssr.js</code></a> file:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> getInitColorSchemeScript <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">onRenderBody</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> setPreBodyComponents <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setPreBodyComponents</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getInitColorSchemeScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="4-refactor-custom-styles-to-use-the-attribute-selector">4. Refactor custom styles to use the attribute selector<a aria-labelledby="4-refactor-custom-styles-to-use-the-attribute-selector" class="anchor-link" href="#4-refactor-custom-styles-to-use-the-attribute-selector" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="4-refactor-custom-styles-to-use-the-attribute-selector"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Users will continue to encounter dark-mode flickering if your custom styles include conditional expressions, as shown below:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token comment">// theming example</span>\n<span class="token function">extendTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">MuiChip</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">styleOverrides</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function-variable function">root</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span>\n            theme<span class="token punctuation">.</span>palette<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">\'dark\'</span>\n              <span class="token operator">?</span> <span class="token string">\'rgba(255 255 255 / 0.2)\'</span>\n              <span class="token operator">:</span> <span class="token string">\'rgba(0 0 0 / 0.2)\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// or a custom component example</span>\n<span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span>\n    theme<span class="token punctuation">.</span>palette<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">\'dark\'</span> <span class="token operator">?</span> <span class="token string">\'rgba(255 255 255 / 0.2)\'</span> <span class="token operator">:</span> <span class="token string">\'rgba(0 0 0 / 0.2)\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>This is because the <code>theme.palette.mode</code> is always <code>light</code> on the server.</p>\n<p>To fix this problem, replace conditional expressions with the attribute selector instead:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token comment">// theming example</span>\n<span class="token function">extendTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">MuiChip</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">styleOverrides</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function-variable function">root</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'rgba(0 0 0 / 0.2)\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">[</span>theme<span class="token punctuation">.</span><span class="token function">getColorSchemeSelector</span><span class="token punctuation">(</span><span class="token string">\'dark\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'rgba(255 255 255 / 0.2)\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// or a custom component example</span>\n<span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'rgba(0 0 0 / 0.2)\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>theme<span class="token punctuation">.</span><span class="token function">getColorSchemeSelector</span><span class="token punctuation">(</span><span class="token string">\'dark\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'rgba(255 255 255 / 0.2)\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<aside class="MuiCallout-root MuiCallout-warning"><p>The <code>theme.getColorSchemeSelector()</code> is a utility function that returns an attribute selector <code>&#39;[data-mui-color-scheme=&quot;dark&quot;] &amp;&#39;</code>.</p>\n<p>Note that the attribute selector creates higher CSS specificity which could be cumbersome for theming.</p>\n\n</aside><h2 id="5-test-dark-mode-flickering">5. Test dark-mode flickering<a aria-labelledby="5-test-dark-mode-flickering" class="anchor-link" href="#5-test-dark-mode-flickering" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="5-test-dark-mode-flickering"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><ol>\n<li>Toggle dark mode in your application</li>\n<li>Open DevTools and set the <a href="https://developer.chrome.com/docs/devtools/evaluate-performance/#simulate_a_mobile_cpu">CPU throttling</a> to the lowest value (don&#39;t close the DevTools).</li>\n<li>Refresh the page. You should see the all components in dark mode at first glance.</li>\n</ol>\n'],toc:[{text:"1. Add the new provider",level:2,hash:"1-add-the-new-provider",children:[{text:"Without a custom theme",level:3,hash:"without-a-custom-theme"},{text:"Custom theme",level:3,hash:"custom-theme"}]},{text:"2. Remove the toggle mode logic",level:2,hash:"2-remove-the-toggle-mode-logic",children:[]},{text:"3. Prevent dark-mode flickering in server-side applications",level:2,hash:"3-prevent-dark-mode-flickering-in-server-side-applications",children:[{text:"Next.js",level:3,hash:"next-js"},{text:"Gatsby",level:3,hash:"gatsby"}]},{text:"4. Refactor custom styles to use the attribute selector",level:2,hash:"4-refactor-custom-styles-to-use-the-attribute-selector",children:[]},{text:"5. Test dark-mode flickering",level:2,hash:"5-test-dark-mode-flickering",children:[]}],title:"Migrating to CSS theme variables",headers:{components:[]}}},o={};o.scope={process:{},import:{}};var c={},l=a(824246);function i(){return t||(t=(0,l.jsx)(e.Z,{demos:o,docs:p,demoComponents:c}))}},422371:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/experimental-api/css-theme-variables/migration",function(){return a(985378)}])}},function(n){n.O(0,[75760,36634,39152,35408,85992,56063,76957,41253,46888,21829,81125,68256,96387,46324,70116,73793,16402,86277,49983,18956,58156,76822,78723,69595,49774,92888,40179],function(){return n(n.s=422371)}),_N_E=n.O()}]);